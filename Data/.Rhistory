iris[1:3,]
# Todos los renglones menos el primero
iris[-1,]
# Para traer columnas completas de un dataframe
# La primer columna por el número de columna que es
iris[,1]
# La primer columna por el nombre de columna que es
iris[,'Sepal.Length']
# La primer columna por el nombre de columna que es
iris$Sepal.Length
# Las primeras dos columnas
iris[,1:2]
# Todas las columnas menos la primera
iris[,-1]
# Para traer elementos segun renglones y columnas
# Primer renglón, dos primeras columnas
iris[1, 1:2]
iris[1, c('Sepal.Length', 'Sepal.Width')]
# Para traer elementos segun renglones y columnas
# Primer renglón, dos primeras columnas
iris[1, 1:2]
iris[1, c('Sepal.Length', 'Sepal.Width')]
# Primeros tres renglones, dos últimas columnas
iris[1:3, 2:3]
# Primeros tres renglones, primer y última columna
iris[1:3, c(1,3)]
iris[1:3, c('Sepal.Length', 'Petal.Length')]
iris
names(iris)
unique(Sepa.Length)
unique(iris$Sepal.Length)
unique(iris$Sepal.Width)
unique(iris$Petal.Width)
unique(iris$Petal.Length)
unique(iris$Species)
# Para agreger un nuevo renglón utilizamos rbind
iris.parte2 <- data.frame(Sepal.Length = c(6,7),
Sepal.Width = c(2.5,3.5),
Petal.Length = c(3,3),
Petal.Width = c(0.01,2.08),
Species = c('virginica','versicolor'))
iris
iris.parte2
# Para crear un dataframe
df.example <- data.frame(clave = c(1,2,3),
grado = c(4,4,5),
sexo = c('F','M','M'))
# Para crear un dataframe
df.example <- data.frame(clave = c(1,2,3),
grado = c(4,4,5),
sexo = c('F','M','M'))
# Utilizaremos el dataset iris
iris
# Para ver el número de renglones de un dataframe utilizamos nrow
nrow(iris)
# Para crear un dataframe
df.example <- data.frame(clave = c(1,2,3),
grado = c(4,4,5),
sexo = c('F','M','M'))
# Utilizaremos el dataset iris
iris
# Para ver el número de renglones de un dataframe utilizamos nrow
nrow(iris)
# Para ver el número de columnas de un dataframe utilizamos ncol
ncol(iris)
# Para ver el número de renglones y columnas de un dataframe utilizamos dim
dim(iris)
# Utilizamos paste para imprimir texto y el resultado de código
print(paste('El número de columnas de nuestro dataframe es:', ncol(iris)))
print(paste('El número de renglones de nuesrtro dataframe es:', nrow(iris)))
# Para ver el nombre de las columnas utilizamos names
names(iris)
# Para traer un elemento de un dataframe debemos darle la ubicación
# Primer renglón, primer columna
iris[1,1]
# Tercer renglón, primer columna
iris[3,1]
# Tercer renglón, segunda columna
iris[3,2]
# Para traer renglones completos de un dataframe
# El primer renglón utilizando el número de renglón que es
iris[1,]
# Los tres primeros renglones
iris[1:3,]
# Todos los renglones menos el primero
iris[-1,]
# Para traer columnas completas de un dataframe
# La primer columna por el número de columna que es
iris[,1]
# La primer columna por el nombre de columna que es
iris[,'Sepal.Length']
# La primer columna por el nombre de columna que es
iris$Sepal.Length
# Las primeras dos columnas
iris[,1:2]
# Todas las columnas menos la primera
iris[,-1]
# Para traer elementos segun renglones y columnas
# Primer renglón, dos primeras columnas
iris[1, 1:2]
iris[1, c('Sepal.Length', 'Sepal.Width')]
# Primeros tres renglones, dos últimas columnas
iris[1:3, 2:3]
# Primeros tres renglones, primer y última columna
iris[1:3, c(1,3)]
iris[1:3, c('Sepal.Length', 'Petal.Length')]
# Para agreger un nuevo renglón utilizamos rbind
iris.parte2 <- data.frame(Sepal.Length = c(6,7),
Sepal.Width = c(2.5,3.5),
Petal.Length = c(3,3),
Petal.Width = c(0.01,2.08),
Species = c('virginica','versicolor'))
iris
iris.parte2
df.iris <- rbind(iris, iris.parte2)
df.iris
# Para agregar una columna
df.example.newcolumn <- data.frame(calificacion = c(9,6,10))
df.example.newcolumn
df.example <- cbind(df.example, df.example.newcolumn)
df.example
# Para transformar una columna
df.oscars$calificacion <- df.oscars$calificacion + 0.5
# Para transformar una columna
df.example$calificacion <- df.example$calificacion + 0.5
df.example
# Para transformar una columna y agregar la transformación como una nueva
df.oscars$nueva_col <- (df.oscars$calificacion + 8)/2
# Para transformar una columna y agregar la transformación como una nueva
df.example$nueva_col <- (df.example$calificacion + 8)/2
df.example
# Para eliminar una columna
df.example$grado <- NULL
df.example
# Para crear un dataframe
df.example <- data.frame(clave = c(1,2,3),
grado = c(4,4,5),
sexo = c('F','M','M'))
# Utilizaremos el dataset iris
iris
# Para ver el número de renglones de un dataframe utilizamos nrow
nrow(iris)
# Para ver el número de columnas de un dataframe utilizamos ncol
ncol(iris)
# Para ver el número de renglones y columnas de un dataframe utilizamos dim
dim(iris)
# Utilizamos paste para imprimir texto y el resultado de código
print(paste('El número de columnas de nuestro dataframe es:', ncol(iris)))
print(paste('El número de renglones de nuesrtro dataframe es:', nrow(iris)))
# Para ver el nombre de las columnas utilizamos names
names(iris)
# Para traer un elemento de un dataframe debemos darle la ubicación
# Primer renglón, primer columna
iris[1,1]
# Tercer renglón, primer columna
iris[3,1]
# Tercer renglón, segunda columna
iris[3,2]
# Para traer renglones completos de un dataframe
# El primer renglón utilizando el número de renglón que es
iris[1,]
# Los tres primeros renglones
iris[1:3,]
# Todos los renglones menos el primero
iris[-1,]
# Para traer columnas completas de un dataframe
# La primer columna por el número de columna que es
iris[,1]
# La primer columna por el nombre de columna que es
iris[,'Sepal.Length']
# La primer columna por el nombre de columna que es
iris$Sepal.Length
# Las primeras dos columnas
iris[,1:2]
# Todas las columnas menos la primera
iris[,-1]
# Para traer elementos segun renglones y columnas
# Primer renglón, dos primeras columnas
iris[1, 1:2]
iris[1, c('Sepal.Length', 'Sepal.Width')]
# Primeros tres renglones, dos últimas columnas
iris[1:3, 2:3]
# Primeros tres renglones, primer y última columna
iris[1:3, c(1,3)]
iris[1:3, c('Sepal.Length', 'Petal.Length')]
# Para agreger un nuevo renglón utilizamos rbind
iris.parte2 <- data.frame(Sepal.Length = c(6,7),
Sepal.Width = c(2.5,3.5),
Petal.Length = c(3,3),
Petal.Width = c(0.01,2.08),
Species = c('virginica','versicolor'))
iris
iris.parte2
df.iris <- rbind(iris, iris.parte2)
df.iris
# Para agregar una columna
df.example.newcolumn <- data.frame(calificacion = c(9,6,10))
df.example.newcolumn
df.example <- cbind(df.example, df.example.newcolumn)
df.example
# Para transformar una columna
df.example$calificacion <- df.example$calificacion + 0.5
df.example
# Para transformar una columna y agregar la transformación como una nueva
df.example$nueva_col <- (df.example$calificacion + 8)/2
df.example
# Para eliminar una columna
df.example$grado <- NULL
df.example
# Funciones útiles
# Funciones útiles
df
# Funciones útiles
iris.head(8)
iris.tail(12)
# Funciones útiles
head(iris, 8)
tail(iris)
unique(iris$SepalSpecies)
unique(iris$Sepal.Species)
unique(iris$Species)
names(iris)
names(iris)
names(iris) <- c("Longitud.Sepalo","Ancho.Sepalo","Longitud.Petalo","Ancho.Petalo","Especies")
head(iris)
True
TRUE
variable.char <- 'Hola R'
variable.num <- 3.1416
variable.int <- 149213L
variable.logical <- TRUE
variable.char
variable.num
variable.int
variable.logical
class(variable.char)
class(variable.num)
class(variable.logical)
class(variable.int)
typeof(variable.char)
typeof(variable.num)
typeof(variable.int)
typeof(variable.logical)
print(variable.char)
print(variable.num)
print(variable.int)
print(variable.logical)
print(class(variable.char))
print(class(variable.num))
print(class(variable.int))
print(class(variable.logical))
mi.vector <- seq(1,10)
mi.vector
mi.vector*0.582
(mi.vector*0.582)^2
getwd()
setwd('~')
getwd()
setwd('~/')
getwd()
setwd('~/Desktop')
setwd('..')
getwd()
setwd('~')
getwd()
setwd('-')
# Para ver la ruta de dónde estamos trabajando
getwd()
# Para bajar dos niveles del directorio de trabajo
# utilizamos ../.. y para accesar a una nueva carpeta ponemos su nombre, Data
setwd('../../Data')
# Vemos la ruta cambiada
getwd()
dataframe.traffic <- read.csv('Metro_Interstate_Traffic_Volume.csv')
iris
min(iris$Sepal.Length)
mean(iris$Sepal.Length)
max(iris$Sepal.Length)
median(iris$Sepal.Length)
min(iris$Sepal.Length[1:5])
iris[iris$Sepal.Length == 4]
iris[iris$Sepal.Length > 1]
iris[iris$Sepal.Length > 1]
iris$Sepal.Width
iris$Sepal.Width > 2
source('C:/Users/AnaLuisaOrtegaRenter/Desktop/BEDU-Estadistica/A2-Estadistica-con-R-2020/Sesion-01/Ejemplo-03/Ejercicio03.R', echo=TRUE)
iris[iris$Sepal.Width > 2,]
iris[iris$Sepal.Width > 2, ]
iris[iris$Sepal.Width > mean(iris$Sepal.Width), ]
# Podemos comparar y elegir cuántos renglones mostrar
iris[iris$Sepal.Width > 2, 1:10]
# Podemos comparar y elegir cuántos renglones mostrar
iris[iris$Sepal.Width > 2,]
iris[,1:5]
# Podemos comparar y elegir cuáles columnas mostrar
iris[iris$Sepal.Width > ,1:3]
# Podemos comparar y elegir cuáles columnas mostrar
iris[iris$Sepal.Width > 2,1:3]
summary(iris)
str(irsi)
str(iris)
#x <- getURL("https://raw.githubusercontent.com/analuisaortega/A2-Estadistica-con-R-2020/new-content/Data/Metro_Interstate_Traffic_Volume.csv")
#y <- read.csv(text = x)
#y
')
# Podemos leer un archivo que esta en internet
dataframe.traffic.2 <- read.csv('https://raw.githubusercontent.com/analuisaortega/A2-Estadistica-con-R-2020/new-content/Data/Metro_Interstate_Traffic_Volume.csv')
# Podemos leer un archivo que esta en internet
dataframe.traffic.2 <- read.csv('https://raw.githubusercontent.com/analuisaortega/A2-Estadistica-con-R-2020/new-content/Data/Metro_Interstate_Traffic_Volume.csv')
# Podemos leer un archivo que esta en internet
dataframe.traffic.2 <- read.csv('https://raw.githubusercontent.com/analuisaortega/A2-Estadistica-con-R-2020/new-content/Data/Metro_Interstate_Traffic_Volume.csv', header =  TRUE)
dataframe.traffic
# Podemos quedarnos solamente con las primeras 20 observaciones
dataframe.traffic.20 <- head(dataframe.traffic, 20)
# Podemos guardarla como csv en local
write.csv(dataframe.traffic.20, file = 'Short_DF_Example.csv')
# Podemos leer un archivo que esta en internet
dataframe.traffic.2 <- read.csv('https://raw.githubusercontent.com/analuisaortega/A2-Estadistica-con-R-2020/new-content/Data/Metro_Interstate_Traffic_Volume.csv',
header =  TRUE)
fibonacci <- function(n){
a <- 1
b <- 1
c <- a+b
a <- b
b <- c
}
function(5)
function(5)
fibonacci <- function(){
a <- 1
b <- 1
c <- a+b
a <- b
b <- c
}
fibonacci()
return a,b
return a}
a
b <- c
return 'Hola'
fibonacci <- function(){
return 'Hola'
}
fibonacci <- function()
{
return('Hola')
}
fibonacci()
fibonacci <- function(nombre)
{
mensaje <- paste('Hola', nombre)
return(mensaje)
}
fibonacci('Ana')
fibonacci('Luisa')
fibonacci <- function(nombre)
{
mensaje <- paste('Hola', nombre)
return(mensaje)
}
fibonacci('Ana')
fibonacci('Pablo')
operacion.personalizada <- function(a,b,c){
paso.1 <- (a+b)*4 + 2*a
paso.2 <- paso.1**2 + c/2
paso.3 <- paso.2**3
return(paso.3)
}
opearcion.personalizada(1,2,3)
operacion.personalizada(1,2,3)
getwd()
getwd()
getwd()
getwd()
getwd()
seq(1,500, by =5)
seq(1,500, by =10)
mi.vector <- seq(from = 1, to = 500, by = 10)
len(mi.vector)
lenght(mi.vector)
length(mi.vector)
mi.vector[length(mi.vector)]
mi.vector[length(mi.vector)] <- -1
mi.vector
mi.vector*0.85 + 10
mi.vector <- seq(from = 1, to = 500, by = 10)
length(mi.vector)
mi.vector[length(mi.vector)] <- -1
mi.vector.transformado <- mi.vector*0.85 + 10
sort(mi.vector.transformado, descending = TRUE)
sort(mi.vector.transformado, ascending= FALSE)
sort(mi.vector.transformado, decreasing = TRUE)
mtcars
names(mtcars)
mtcars[5,3]
mtcars
mtcars[5,3]
mtcars[,c(4,5)]
mtcars[1:20, c(4,5)]
names(mtcars)
mtcars
mtcars
?mtcars
mtcars
?mtcars
max(mtcars$cyl)
min(mtcars$qsec)
mtcars
?mtcars
max(mtcars$cyl)
min(mtcars$qsec)
mean.cyl <- mean(mtcars$cyl)
mean.qsec <- mean(mtcars$qsec)
mtcars[mtcars$cyl > mean.cyl, ]
mtcars[(mtcars$cyl > mean.cyl) & (mtcars$qsec > mean.qsec), ]
getwd()
setwd('~')
getwd()
?input
?readline
welcome <- function(nombre){
my.msg <- paste('Bienvenido',nombre)
return(my.msg)
}
welcome('Ana')
readline(prompt = '¿Cuál es tu nombre?')
nombre <- readline(prompt = '¿Cuál es tu nombre?')
welcome(nombre)
sort('Analu')
sort('Analu', descending =True)
sort('Analu', descending =TRUE)
rev('Analu')
rev('Analu','Ana')
welcome.2 <- function(nombre, edad){
my.msg <- paste('Bienvenido',nombre, ' de ', edad)
return(my.msg)
}
welcome.2('Ana',24)
my.msg <- paste('Bienvenido',nombre, 'de', edad)
return(my.msg)
welcome.2 <- function(nombre, edad){
my.msg <- paste('Bienvenido',nombre, 'de', edad)
return(my.msg)
}
welcome.2('Ana',24)
Metro_Interstate_Traffic_Volume <- read.csv("C:/Users/AnaLuisaOrtegaRenter/Desktop/BEDU-Estadistica/A2-Estadistica-con-R-2020/Data/Metro_Interstate_Traffic_Volume.csv", header=FALSE)
View(Metro_Interstate_Traffic_Volume)
Metro_Interstate_Traffic_Volume
Metro_Interstate_Traffic_Volume %>% head(5)
library(dplur)
library(dplyr)
Metro_Interstate_Traffic_Volume %>% head(5)
Metro_Interstate_Traffic_Volume <- read.csv("C:/Users/AnaLuisaOrtegaRenter/Desktop/BEDU-Estadistica/A2-Estadistica-con-R-2020/Data/Metro_Interstate_Traffic_Volume.csv")
View(Metro_Interstate_Traffic_Volume)
Metro_Interstate_Traffic_Volume %>% head(5)
Metro_Interstate_Traffic_Volume$weather_main
levels(Metro_Interstate_Traffic_Volume$weather_main)
ordered.leves <- c("Clear", "Clouds", "Drizzle","Fog","Haze","Mist","Rain","Smoke","Snow","Squall","Thunderstorm")
levels(Metro_Interstate_Traffic_Volume$weather_main)
ordered.levels <- c("Clear", "Clouds", "Drizzle","Fog","Haze","Mist","Rain","Smoke","Snow","Squall","Thunderstorm")
Metro_Interstate_Traffic_Volume$weather_main_ordered <- factor(x = Metro_Interstate_Traffic_Volume$weather_main, levels = ordered.levels, ordered = TRUE)
str(Metro_Interstate_Traffic_Volume)
getwd()
df.traffic <- read.csv("../../Data/Metro_Interstate_Traffic_Volume.csv")
setwd('..')
getwd()
setwd('Desktop')
getwd()
setwd('BEDU-Estadistica')
getwd()
setwd('A2-Estadistica-con-R-2020')
getwd()
setwd('Data')
df.traffic <- read.csv("Metro_Interstate_Traffic_Volume.csv")
df.traffic
names(df.traffic)
str(df.traffic)
df.traffic <- read.csv("Metro_Interstate_Traffic_Volume.csv")
str(df.traffic)
mean.traffic <- mean(df.traffic$traffic_volume)
df.traffic %>% select(weather_main, traffic_volumne) %>% filter(traffic_volumne >= mean.traffic)
df.traffic %>% select(weather_main, traffic_volumne) %>% filter(traffic_volumne >= mean.traffic)
library(dplyr)
df.traffic %>% select(weather_main, traffic_volumne) %>% filter(traffic_volumne >= mean.traffic)
df.traffic %>% select(weather_main, traffic_volume) %>% filter(traffic_volumne >= mean.traffic)
df.traffic %>% select(weather_main, traffic_volume) %>% filter(traffic_volume >= mean.traffic)
df.traffic %>% select(weather_main, traffic_volume) %>% rename(weather_main == clima)
df.traffic %>% select(weather_main, traffic_volume) %>% rename(weather_main = clima)
df.traffic %>% select(weather_main, traffic_volume) %>% rename(clima = weather_main)
df.traffic.filter
df.traffic.filter <- df.traffic %>%
select(weather_main, traffic_volume) %>%
rename(clima = weather_main) %>%
rename(trafico = traffic_volume) %>%
filter(trafico >= mean.traffic)
df.traffic.filter
str(df.traffic.filter)
dim(df.traffic.filter)
df.traffic.filter %>% group_by(clima) %>% summarise(max.traffic = max(trafico),
min.traffic = min(trafico))
df.traffic.filter %>%
group_by(clima) %>%
summarise(max.traffic = max(trafico),
min.traffic = min(trafico)) %>%
mutate(diff.trafic = max.traffic - min.traffic)
df.traffic.grouped <- df.traffic.filter %>%
group_by(clima) %>%
summarise(max.traffic = max(trafico),
min.traffic = min(trafico))
df.traffic.grouped %>%
mutate(diff.trafic = max.traffic - min.traffic)
